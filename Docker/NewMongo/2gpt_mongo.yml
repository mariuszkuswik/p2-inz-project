version: '3.6'

services:
  mongo_control_plane:
    image: mongo:4.0.0
    command: mongod --replSet replicaTest --port 7011 --bind_ip_all
    ports:
      - "7011:7011"
    environment:
      MONGO_INITDB_ROOT_USERNAME: ans_mariusz
      MONGO_INITDB_ROOT_PASSWORD: mypassword
    volumes:
      - /data/disk1/mongo_control_plane/db:/data/db
      - /etc/localtime:/etc/localtime:ro
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == manager
    networks:
      - mongo
    healthcheck:
      test: "exit 0"

  mongo_node1:
    image: mongo:4.0.0
    command: mongod --replSet replicaTest --port 7012 --bind_ip_all
    environment:
      MONGO_INITDB_ROOT_USERNAME: ans_mariusz
      MONGO_INITDB_ROOT_PASSWORD: mypassword
    volumes:
      - /data/disk2/mongo_node1/db:/data/db
      - /etc/localtime:/etc/localtime:ro
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == worker
    networks:
      - mongo
    healthcheck:
      test: "exit 0"

  mongo_node2:
    image: mongo:4.0.0
    command: mongod --replSet replicaTest --port 7013 --bind_ip_all
    environment:
      MONGO_INITDB_ROOT_USERNAME: ans_mariusz
      MONGO_INITDB_ROOT_PASSWORD: mypassword
    volumes:
      - /data/disk3/mongo_node2/db:/data/db
      - /etc/localtime:/etc/localtime:ro
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == worker
    networks:
      - mongo
    healthcheck:
      test: "exit 0"

  init-replica:
    image: mongo:4.0.0
    command: >
      bash -c "sleep 10 && mongo --host mongo_control_plane:7011 -u ans_mariusz -p mypassword --eval 'rs.initiate({_id: \"replicaTest\", members: [{_id: 0, host: \"mongo_control_plane:7011\"}, {_id: 1, host: \"mongo_node1:7012\"}, {_id: 2, host: \"mongo_node2:7013\"}]});'"
    depends_on:
      - mongo_control_plane
      - mongo_node1
      - mongo_node2
    networks:
      - mongo
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == manager
    restart: "no"
    healthcheck:
      test: "exit 0"

networks:
  mongo:

